// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=isA);
    Or(a=isA, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);
    And(a=instruction[15], b=instruction[3], out=writeM);
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zero, ng=neg);
    Or(a=zero, b=neg, out=notPos);
    Not(in=notPos, out=pos);
    And(a=instruction[0], b=pos, out=jgt);
    And(a=instruction[1], b=zero, out=jeq);
    And(a=instruction[2], b=neg, out=jlt);
    Or(a=jgt, b=jeq, out=j12);
    Or(a=j12, b=jlt, out=j123);
    And(a=j123, b=instruction[15], out=jump);
    PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
/*
*   Our main input for the CPU is the instruction. The instruction is a 16-bit input that is either A or C instruction.
*   By implementing the components, we need to understand what parts we need to operate for the CPU.
*   Those parts are: A-Register, D-Register, M-Register, ALU, Jump bits, and a PC Register, all in order.
*   First, you will insert the instruction into a Mux16 chip along with the ALU output and a selector of insturctions (15).
*   Insert the instruction into a NOT chip and take the ouptut to an OR chip with more instructions (5).
*   Then the ouput of the OR and the Mux16 chip will insert into the A-Register chip (Mux -> input, Or -> load).
*   The register will have an output of 16-bit values and another output (0..14) for "addressM" -> memory address.
*   To summarize, the OR chip -> instruction[15] == 1 -> @value | instruction[5] == 1 -> A=outALU | The NOT chip -> determines the instruction being processed, 
*   (the Mux16 before was figuring the instruction, A or C by Op-Code).
*   Furthermore, when instruction[4] == 1 in the AND chip, then D=outALU is the value. This will load a new input to the D-Register and set the ALU x-input to D.
*   And when instruction[3] == 1 in the next AND chip, its value is M=outALU for the M-Register.
*   Then the Mux16 chip will help set the ALU y-input to ether A or M. Now, everything will be implemented as required in the ALU chip.
*   Then, we will have to jump. The OR chip will determine if neg, zero ALU flags are false.
*   The NOT chip will negate the result to determine if true. The AND chips are to determine if outALU equals 0 or not. 
*   The next OR chips will combine the first 2 jump bits and then the prior bits and the 3rd jump bit. Then the AND chip will see if the jump condition (j123 == 1) is met.
*   Next for the PC Register, we will take in the A-Register, jump result, reset input, and increment value, to determine the location of the next address in ROM32K.
*   ex: if (jump == 1), pc = outA...ROM[A] -> if (reset == 1), pc = 0...ROM[0], else, pc = pc + 1 -> go to the next address.
*/